import glob
import shutil
import os
import pandas as pd
import nrrd
import re
from sklearn.model_selection import train_test_split
import pickle


#----------------------------------------------------------------------------------------
# training dataset
#----------------------------------------------------------------------------------------         
def train_val_split(proj_dir, pmh_data_dir, chum_data_dir, chus_data_dir, pmh_label_csv,
                      chum_label_csv, chus_label_csv, train_img_dir, val_img_dir):

    ### PMH dataset
    pmh_label = pd.read_csv(os.path.join(proj_dir, pmh_label_csv))
    pmh_label['Contrast'] = pmh_label['Contrast'].map({'Yes': 1, 'No': 0})
    labels = pmh_label['Contrast'].to_list()
    #labels = to_categorical(labels)
    #print(labels)
    fns = [fn for fn in sorted(glob.glob(pmh_data_dir + '/*nrrd'))]
    #print(fns)
    df_pmh = pd.DataFrame({'file': fns, 'label': labels})
    pd.options.display.max_colwidth = 100
    #print(df_pmh)
    file = df_pmh['file'][0]
    data, header = nrrd.read(file)
    print(data.shape)
    
    ### CHUM dataset
    try:
        labels = []
        chum_label = pd.read_csv(os.path.join(proj_dir, chum_label_csv))
        chum_label['Contrast'] = chum_label['Contrast'].map({'Yes': 1, 'No': 0})
        for i in range(chum_label.shape[0]):
            file = chum_label['File ID'].iloc[i]
            scan = file.split('_')[2].strip()
            if scan == 'CT-SIM':
                labels.append(chum_label['Contrast'].iloc[i])
            elif scan == 'CT-PET':
                continue
        #print(labels)
        fns = []
        for fn in sorted(glob.glob(chum_data_dir + '/*nrrd')):
            scan_ = fn.split('/')[-1].split('_')[2].strip()
            if scan_ == 'CT-SIM':
                fns.append(fn)
            else:
                continue
        #print(fns)
        df_chum = pd.DataFrame({'file': fns, 'label': labels})
        #print(df_chum)
        pd.options.display.max_colwidth = 100
        file = df_chum['file'][0]
        data, header = nrrd.read(file)
        print(data.shape)
    except Exception as e:
        print(e)
    else:
        print('CHUM datset created.')

    ### CHUS dataset
    try:
        labels = []
        chus_label = pd.read_csv(os.path.join(proj_dir, chus_label_csv))
        chus_label['Contrast'] = chus_label['Contrast'].map({'Yes': 1, 'No': 0})
        labels = chus_label['Contrast'].to_list()
        #print(labels)
        fns = []
        for fn in sorted(glob.glob(chus_data_dir + '/*nrrd')):
            scan = fn.split('/')[-1].split('_')[2].strip()
            if scan == 'CT-SIMPET':
                fns.append(fn)
            else:
                continue
        #print(fns)
        df_chus = pd.DataFrame({'file': fns, 'label': labels})
        pd.options.display.max_colwidth = 100
        #print(df_chus)
        file = df_chus['file'][0]
        data, header = nrrd.read(file)
        print(data.shape)
    except Exception as e:
        print('e')
    else:
        print('CHUS dataset created.')

    ### combine dataset for train-val split
    df_tot = pd.concat([df_pmh, df_chum, df_chus])
    x = df_tot['file']
    y = df_tot['label']
    x_train, x_val, y_train, y_val = train_test_split(
        x,
        y,
        stratify=y,
        test_size=0.3,
        random_state=42
        )           
    #print(x_train)
    #print(y_train)
    #print(x_val)
    #print(y_val)
    x_train.to_pickle(os.path.join(train_img_dir, 'x_train.p'))
    y_train.to_pickle(os.path.join(train_img_dir, 'y_train.p'))
    x_val.to_pickle(os.path.join(val_img_dir, 'x_val.p'))
    y_val.to_pickle(os.path.join(val_img_dir, 'y_val.p'))

    #return x_train, x_val, y_train, y_val
    







