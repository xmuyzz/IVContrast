import glob
import shutil
import os
import pandas as pd
import numpy as np
import nrrd
import re
import matplotlib
import matplotlib.pyplot as plt
import pickle
#import skimage.transform as st
from tensorflow.keras.utils import to_categorical
from data_utils import resize_3d

#----------------------------------------------------------------------------------------
# test dataset
#----------------------------------------------------------------------------------------
def test_dataset(proj_dir, mdacc_label_csv, mdacc_data_dir,
                 test_img_dir, interp_type, input_channel, downsample_size):
    
    ### load image data
    df_label = pd.read_csv(os.path.join(proj_dir, mdacc_label_csv))
    df_label['Contrast'] = df_label['Contrast'].map({'Yes': 1, 'No': 0})
    labels = df_label['Contrast'].to_list()
    print('contrast scan in test:', labels.count(1))
    #print(labels)
    fns = [fn for fn in sorted(glob.glob(mdacc_data_dir + '/*nrrd'))]
    #print(fns)
    df = pd.DataFrame({'file': fns, 'label': labels})
    pd.options.display.max_colwidth = 100
    #print(df)
    file = df['file'][0]
    #data, header = nrrd.read(test_file)
    #print(data.shape)
    x_test = df['file']
    y_test = df['label']

    ### generate CT slices and save them as numpy array
    count = 0	
    list_fn = []
    list_slice_number = []
    arr = np.empty([0, 64, 64])
    for test_file in x_test:
        count += 1
        print(count)
        patient_id = 'MDACC' + test_file.split('/')[-1].split('-')[2][1:4].strip()
        ### resize image to (36, 64, 64)
        ### sitk axis order (x, y, z), np axis order (z, y, x)
        resized_arr = resize_3d.resize_3d(
                nrrd_image=test_file,
                interp_type=interp_type,
                output_size=downsample_size
                )
        data = resized_arr[6:32, :, :]
        data[data <= -1024] = -1024
        data[data > 700] = 0
        data_interp = np.interp(data, [-200, 200], [0, 1])
        ### resize data from (n, 512, 512) to (36, 64, 64)
        arr = np.concatenate([arr, data_interp], 0)
        ### find img slices for all scans
        list_slice_number.append(data.shape[0])
        ### create patient ID and slice index for img
        for i in range(data.shape[0]):
            img = data[i, :, :]
            fn = patient_id + '_' + 'slice%s'%(f'{i:03d}')
            list_fn.append(fn)
    if input_channel == 1:
        test_arr = arr.reshape(arr.shape[0], 64, 64, 1)
        print('test arr shape:', test_arr.shape)
        np.save(os.path.join(test_img_dir, 'test_arr.npy'), test_arr)
    elif input_channel == 3:
        test_arr = np.broadcast_to(arr, (3, arr.shape[0], 64, 64))
        test_arr = np.broadcast_to(test_arr, (1, 2, 3, 0))
        print('test arr shape:', test_arr.shape)
        np.save(os.path.join(test_img_dir, 'test_arr_3ch.npy'), test_arr)

    ### generate labels for CT slices
    list_label = []
    list_img = []
    for label, slice_number in zip(y_test, list_slice_number):
        list_1 = [label] * slice_number
        list_label.extend(list_1)
    print('fn size:', len(list_fn))
    print('label size:', len(list_label))
    print('contrast image in test set:', list_label.count(1))
    test_df = pd.DataFrame({'fn': list_fn, 'label': list_label})
    pd.options.display.max_columns = 100
    pd.set_option('display.max_rows', 500)
    print(test_df[0:100])
    test_df.to_pickle(os.path.join(test_img_dir, 'test_df.p'))
    print('test data size:', test_df.shape[0])










